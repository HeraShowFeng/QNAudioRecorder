{"version":3,"file":"bundle.js","sources":["../src/index.js"],"sourcesContent":["const FFT_SIZE = 2048\nconst AUDIO_WEIGHT_LIMIT = 0\nconst VOLUME_INTERVAL = 100 // ms\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext\nconst audioContext = new AudioContext({ latencyHint: 'interactive' })\nconst analyserNode = audioContext.createAnalyser()\nanalyserNode.fftSize = FFT_SIZE\nconst gainNode = audioContext.createGain()\ngainNode.gain.value = 0\nanalyserNode.connect(gainNode)\ngainNode.connect(audioContext.destination)\nconst dataArray = new Uint8Array(analyserNode.frequencyBinCount)\n\nlet mediaStream\nlet mediaStreamSourceNode\nlet volumeIntervalID\n\nfunction release() {\n  if (mediaStream) {\n    mediaStream.getTracks().forEach((t) => t.stop())\n    mediaStream = undefined\n  }\n  if (mediaStreamSourceNode) {\n    mediaStreamSourceNode.disconnect()\n    mediaStreamSourceNode = undefined\n  }\n  clearInterval(volumeIntervalID)\n  audioContext.suspend()\n}\n\nexport async function start(cb) {\n  release()\n\n  mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true })\n  mediaStreamSourceNode = audioContext.createMediaStreamSource(mediaStream)\n  mediaStreamSourceNode.connect(analyserNode)\n  audioContext.resume()\n\n  volumeIntervalID = setInterval(() => {\n    analyserNode.getByteFrequencyData(dataArray)\n    cb(computeVolume())\n  }, VOLUME_INTERVAL)\n}\n\nexport function stop() {\n  release()\n}\n\nfunction aWeight(f) {\n  const f2 = f * f\n  return (\n    (1.2588966 * 148840000 * f2 * f2) /\n    ((f2 + 424.36) *\n      Math.sqrt((f2 + 11599.29) * (f2 + 544496.41)) *\n      (f2 + 148840000))\n  )\n}\n\nfunction computeVolume() {\n  let sum = 0\n  let length = dataArray.length\n  dataArray.forEach((d, i) => {\n    const frequency = (i * (audioContext.sampleRate || 44100)) / length\n    if (frequency > 22050) {\n      length -= 1\n      return\n    }\n    const weight = (aWeight(frequency) * d) / 255.0\n    if (weight <= AUDIO_WEIGHT_LIMIT) {\n      length -= 1\n      return\n    }\n    sum += weight * weight\n  })\n\n  return length === 0 ? 0 : Math.sqrt(sum / length)\n}\n"],"names":["audioContext","window","AudioContext","webkitAudioContext","latencyHint","analyserNode","createAnalyser","fftSize","gainNode","createGain","gain","value","connect","destination","mediaStream","mediaStreamSourceNode","volumeIntervalID","dataArray","Uint8Array","frequencyBinCount","release","getTracks","forEach","t","stop","undefined","disconnect","clearInterval","suspend","cb","navigator","mediaDevices","getUserMedia","audio","createMediaStreamSource","resume","setInterval","sum","length","getByteFrequencyData","d","i","frequency","sampleRate","f","f2","weight","Math","sqrt"],"mappings":"6OAKMA,EAAe,IADAC,OAAOC,cAAgBD,OAAOE,oBACb,CAAEC,YAAa,gBAC/CC,EAAeL,EAAaM,iBAClCD,EAAaE,QAPI,KAQjB,IAAMC,EAAWR,EAAaS,aAC9BD,EAASE,KAAKC,MAAQ,EACtBN,EAAaO,QAAQJ,GACrBA,EAASI,QAAQZ,EAAaa,aAC9B,IAEIC,EACAC,EACAC,EAJEC,EAAY,IAAIC,WAAWb,EAAac,mBAM9C,SAASC,IACHN,IACFA,EAAYO,YAAYC,QAAQ,SAACC,UAAMA,EAAEC,SACzCV,OAAcW,GAEZV,IACFA,EAAsBW,aACtBX,OAAwBU,GAE1BE,cAAcX,GACdhB,EAAa4B,2BAGaC,OAAI,OAC9BT,oBAEoBU,UAAUC,aAAaC,aAAa,CAAEC,OAAO,uBACjElB,EAAwBf,EAAakC,wBADrCpB,MAEsBF,QAAQP,GAC9BL,EAAamC,SAEbnB,EAAmBoB,YAAY,WAoBjC,IACMC,EACAC,EArBFjC,EAAakC,qBAAqBtB,GAClCY,GAmBEQ,EAAM,EACNC,EAASrB,EAAUqB,OACvBrB,EAAUK,QAAQ,SAACkB,EAAGC,GACpB,IAAMC,EAAaD,GAAKzC,EAAa2C,YAAc,OAAUL,EAC7D,GAAII,EAAY,MACdJ,GAAU,MADZ,CAIA,IAnBaM,EACTC,EAkBEC,sBAlBFD,GADSD,EAmBWF,GAlBXE,GAEiBC,IAC5BA,EAAK,QACLE,KAAKC,MAAMH,EAAK,WAAaA,EAAK,aACjCA,EAAK,UAa6BL,EAAK,IACtCM,GApEmB,EAqErBR,GAAU,EAGZD,GAAOS,EAASA,KAGA,IAAXR,EAAe,EAAIS,KAAKC,KAAKX,EAAMC,MA1EpB,OA6BxB,sDAeElB"}